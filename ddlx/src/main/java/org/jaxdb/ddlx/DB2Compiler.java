/* Copyright (c) 2017 JAX-DB
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * You should have received a copy of The MIT License (MIT) along with this
 * program. If not, see <http://opensource.org/licenses/MIT/>.
 */

package org.jaxdb.ddlx;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedHashSet;

import org.jaxdb.vendor.DbVendor;
import org.jaxdb.www.ddlx_0_6.xLygluGCXAA.$ChangeRule;
import org.jaxdb.www.ddlx_0_6.xLygluGCXAA.$Column;
import org.jaxdb.www.ddlx_0_6.xLygluGCXAA.$IndexType;
import org.jaxdb.www.ddlx_0_6.xLygluGCXAA.$Integer;
import org.jaxdb.www.ddlx_0_6.xLygluGCXAA.$Named;
import org.jaxdb.www.ddlx_0_6.xLygluGCXAA.$Table;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class DB2Compiler extends Compiler {
  private static final Logger logger = LoggerFactory.getLogger(DB2Compiler.class);

  DB2Compiler() {
    super(DbVendor.DB2);
  }

  @Override
  CreateStatement createIndex(final boolean unique, final String indexName, final $IndexType type, final String tableName, final $Named ... columns) {
    final StringBuilder b = new StringBuilder("CREATE ");
    if (unique)
      b.append("UNIQUE ");

    b.append("INDEX ");
    q(b, indexName).append(" USING ").append(type.text()).append(" ON ");
    q(b, tableName).append(" (").append(SQLDataTypes.csvNames(getDialect(), columns)).append(')');
    return new CreateStatement(b.toString());
  }

  @Override
  DropStatement dropTableIfExists(final $Table table) {
    return new DropStatement(q(new StringBuilder("CALL db2perf_quiet_drop('TABLE "), table.getName$().text()).append("')").toString());
  }

  @Override
  void init(final Connection connection) throws SQLException {
    try (final Statement statement = connection.createStatement()) {
      statement.execute("CREATE PROCEDURE db2perf_quiet_drop(IN statement VARCHAR(1000)) LANGUAGE SQL BEGIN DECLARE SQLSTATE CHAR(5); DECLARE NotThere CONDITION FOR SQLSTATE '42704'; DECLARE NotThereSig CONDITION FOR SQLSTATE '42883'; DECLARE EXIT HANDLER FOR NotThere, NotThereSig SET SQLSTATE = ' '; SET statement = 'DROP ' || statement; EXECUTE IMMEDIATE statement; END");
    }
    catch (final SQLException e) {
      if (e.getErrorCode() != -454 || !"42723".equals(e.getSQLState()))
        throw e;
    }
  }

  @Override
  StringBuilder dropIndexOnClause(final $Table table) {
    return new StringBuilder(0);
  }

  @Override
  StringBuilder $null(final StringBuilder b, final $Table table, final $Column column) {
    if (column.getNull$() != null && !column.getNull$().text())
      b.append(" NOT NULL");

    return b;
  }

  @Override
  String $autoIncrement(final LinkedHashSet<CreateStatement> alterStatements, final $Table table, final $Integer column) {
    if (!Generator.isAuto(column))
      return null;

    final String min = getAttr("min", column);
    final String max = getAttr("max", column);
    final String _default = getAttr("default", column);

    final String start = _default != null ? _default : min != null ? min : "1";
    final StringBuilder builder = new StringBuilder("GENERATED BY DEFAULT AS IDENTITY (START WITH ").append(start).append(" INCREMENT BY 1");

    if (min != null)
      builder.append(" MINVALUE ").append(min);

    if (max != null)
      builder.append(" MAXVALUE ").append(max);

    if (_default != null)
      builder.append(" MAXVALUE ").append(_default);

    builder.append(" CYCLE");
    return builder.append(')').toString();
  }

  @Override
  StringBuilder onUpdate(final StringBuilder b, final $ChangeRule onUpdate) {
    if ($ChangeRule.CASCADE.text().equals(onUpdate.text())) {
      if (logger.isWarnEnabled()) logger.warn("ON UPDATE CASCADE is not supported");
      return null;
    }

    return b.append("ON UPDATE ").append(onUpdate.text());
  }
}