<!--
  Copyright (c) 2016 JAX-DB

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  You should have received a copy of The MIT License (MIT) along with this
  program. If not, see <http://opensource.org/licenses/MIT/>.
-->
<xs:schema
  elementFormDefault="qualified"
  targetNamespace="http://www.jaxdb.org/ddlx-0.5.xsd"
  xmlns:ddlx="http://www.jaxdb.org/ddlx-0.5.xsd"
  xmlns:dt="http://www.jaxdb.org/datatypes-0.5.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:import namespace="http://www.jaxdb.org/datatypes-0.5.xsd" schemaLocation="http://www.jaxdb.org/datatypes-0.5.xsd"/>

  <xs:simpleType name="name">
    <xs:restriction base="xs:NCName">
      <xs:maxLength value="64"/> <!-- http://wiki.ispirer.com/sqlways/postgresql/identifiers -->
      <xs:pattern value="[a-zA-Z_][a-zA-Z0-9_]*"/> <!-- https://www.postgresql.org/docs/current/static/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS -->
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="precision">
    <xs:restriction base="xs:byte">
      <xs:annotation>
        <xs:documentation>
          The number of digits in the unscaled value. Note: "precision" must be greater than or equal to "scale".
        </xs:documentation>
      </xs:annotation>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="assert">
    <xs:complexContent>
      <xs:extension base="ddlx:documented">
        <xs:assert test="every $tem in ddlx:table/ddlx:column/@template satisfies exists(ddlx:template[@name=$tem and @xsi:type=$tem/../@xsi:type])"/>
        <xs:assert test="every $fk in ddlx:table/ddlx:column/ddlx:foreignKey satisfies exists(ddlx:table/ddlx:column[@name=$fk/@column and ../@name=$fk/@references and @xsi:type=$fk/../@xsi:type])"/>
        <xs:assert test="every $fk in ddlx:table/ddlx:constraints/ddlx:foreignKey/ddlx:column satisfies exists(ddlx:table/ddlx:column[@name=$fk/@references and ../@name=$fk/../@references and @xsi:type=$fk/../../../ddlx:column[@name=$fk/@name]/@xsi:type])"/>
        <!-- TODO: Assert that (1) exact type and parameters of column of foreign key references identical target column, or (2) the two columns refer to the same template. -->
        <xs:assert test="every $tem in ddlx:template[local-name-from-QName(@xsi:type)='enum' and @default and not(@template)] satisfies (starts-with($tem/@values, $tem/@default) or contains($tem/@values, concat(' ', $tem/@default, ' ')) or ends-with($tem/@values, $tem/@default))"/>
        <xs:assert test="every $col in ddlx:table/ddlx:column[local-name-from-QName(@xsi:type)='enum' and @default and not(@template)] satisfies (starts-with($col/@values, $col/@default) or contains($col/@values, concat(' ', $col/@default, ' ')) or ends-with($col/@values, $col/@default))"/>
        <xs:assert test="every $col in ddlx:table/ddlx:column[local-name-from-QName(@xsi:type)='enum' and @default and @template] satisfies exists(ddlx:template[@name=$col/@template and (starts-with(@values, $col/@default) or contains(@values, concat(' ', $col/@default, ' ')) or ends-with(@values, $col/@default))])"/>
        <!--xs:assert test="every $col in ddlx:table/ddlx:column[local-name-from-QName(@xsi:type)='char' and not(@varying) and not(@length)] satisfies exists(ddlx:template[@name=$col/@template and @length])"/-->
        <xs:assert test="not(ddlx:template[local-name-from-QName(@xsi:type)='char' and string(@varying)!='true' and not(@length)])">
          <xs:annotation>
            <xs:documentation>
              Length must be specified for char templates with varying=false.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="not(ddlx:table/ddlx:column[local-name-from-QName(@xsi:type)='char' and not(@template) and string(@varying)!='true' and not(@length)])">
          <xs:annotation>
            <xs:documentation>
              Length must be specified for char columns with varying=false.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="not(ddlx:template/ddlx:foreignKey)">
          <xs:annotation>
            <xs:documentation>
              ForeignKey cannot be specified in template declaration.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="not(ddlx:template/ddlx:index)">
          <xs:annotation>
            <xs:documentation>
              Index cannot be specified in template declaration.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="every $tem in ddlx:template[@null] satisfies not(exists(ddlx:table/ddlx:column[@template=$tem/@name and @null]))">
          <xs:annotation>
            <xs:documentation>
              Column element cannot override @null defined in template.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="every $tem in ddlx:template[@default] satisfies not(exists(ddlx:table/ddlx:column[@template=$tem/@name and @default]))">
          <xs:annotation>
            <xs:documentation>
              Column element cannot override @default defined in template.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="every $tem in ddlx:template[@min] satisfies not(exists(ddlx:table/ddlx:column[@template=$tem/@name and @min]))">
          <xs:annotation>
            <xs:documentation>
              Column element cannot override @min defined in template.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="every $tem in ddlx:template[@max] satisfies not(exists(ddlx:table/ddlx:column[@template=$tem/@name and @max]))">
          <xs:annotation>
            <xs:documentation>
              Column element cannot override @max defined in template.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="every $tem in ddlx:template[@*[local-name()='generateOnInsert']] satisfies not(exists(ddlx:table/ddlx:column[@template=$tem/@name and @*[local-name()='generateOnInsert']]))">
          <xs:annotation>
            <xs:documentation>
              Column element cannot override @generateOnInsert defined in template.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
        <xs:assert test="every $tem in ddlx:template[@*[local-name()='generateOnUpdate']] satisfies not(exists(ddlx:table/ddlx:column[@template=$tem/@name and @*[local-name()='generateOnUpdate']]))">
          <xs:annotation>
            <xs:documentation>
              Column element cannot override @generateOnUpdate defined in template.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="documented">
    <xs:sequence>
      <xs:element name="documentation" minOccurs="0" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="named">
    <xs:complexContent>
      <xs:extension base="ddlx:documented">
        <xs:attribute name="name" type="ddlx:name" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="changeRule">
    <xs:restriction base="xs:string">
      <xs:enumeration value="RESTRICT"/>
      <xs:enumeration value="CASCADE"/>
      <xs:enumeration value="SET NULL"/>
      <xs:enumeration value="SET DEFAULT"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="foreignKey" abstract="true">
    <xs:attribute name="id" type="xs:string"/>
    <xs:attribute name="references" type="ddlx:name" use="required"/>
    <xs:attribute name="onDelete" type="ddlx:changeRule"/>
    <xs:attribute name="onUpdate" type="ddlx:changeRule"/>
  </xs:complexType>

  <xs:complexType name="foreignKeyUnary">
    <xs:complexContent>
      <xs:extension base="ddlx:foreignKey">
        <xs:attribute name="column" type="ddlx:name" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="foreignKeyComposite">
    <xs:complexContent>
      <xs:extension base="ddlx:foreignKey">
        <xs:sequence maxOccurs="unbounded">
          <xs:element name="column">
            <xs:complexType>
              <xs:complexContent>
                <xs:extension base="ddlx:named">
                  <xs:attribute name="references" type="ddlx:name" use="required"/>
                </xs:extension>
              </xs:complexContent>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="indexType">
    <xs:restriction base="xs:token">
      <xs:enumeration value="BTREE"/>
      <xs:enumeration value="HASH"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="index">
    <xs:complexContent>
      <xs:extension base="ddlx:documented">
        <xs:attribute name="unique" type="xs:boolean" default="false"/>
        <xs:attribute name="type" type="ddlx:indexType" default="BTREE"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="equalityOperator">
    <xs:restriction base="xs:string">
      <xs:enumeration value="eq"/>
      <xs:enumeration value="ne"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="rangeOperator">
    <xs:restriction base="xs:string">
      <xs:enumeration value="eq"/>
      <xs:enumeration value="ne"/>
      <xs:enumeration value="gt"/>
      <xs:enumeration value="gte"/>
      <xs:enumeration value="lt"/>
      <xs:enumeration value="lte"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="check" abstract="true">
    <xs:attribute name="column" type="ddlx:name" use="required"/>
    <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
    <xs:attribute name="value" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="checkReference">
    <xs:complexContent>
      <xs:extension base="ddlx:check">
        <xs:sequence>
          <xs:choice minOccurs="0">
            <xs:element name="and" type="ddlx:checkReference"/>
            <xs:element name="or" type="ddlx:checkReference"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="reference" type="ddlx:name"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="columns">
    <xs:sequence maxOccurs="unbounded">
      <xs:element name="column" type="ddlx:named"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="constraints">
    <xs:sequence>
      <xs:element name="primaryKey" minOccurs="0">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ddlx:columns">
              <xs:attribute name="using" type="ddlx:indexType"/>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
        <xs:unique name="primaryKey_column_name_must_be_unique">
          <xs:selector xpath="ddlx:column"/>
          <xs:field xpath="@name"/>
        </xs:unique>
      </xs:element>
      <xs:element name="foreignKey" type="ddlx:foreignKeyComposite" minOccurs="0" maxOccurs="unbounded">
        <xs:unique name="foreignKey_column_name_must_be_unique">
          <xs:selector xpath="ddlx:column"/>
          <xs:field xpath="@name"/>
        </xs:unique>
        <xs:unique name="foreignKey_reference_name_must_be_unique">
          <xs:selector xpath="ddlx:column"/>
          <xs:field xpath="@references"/>
        </xs:unique>
      </xs:element>
      <xs:element name="unique" type="ddlx:columns" minOccurs="0" maxOccurs="unbounded">
        <xs:unique name="unique_column_name_must_be_unique">
          <xs:selector xpath="ddlx:column"/>
          <xs:field xpath="@name"/>
        </xs:unique>
      </xs:element>
      <xs:element name="check" minOccurs="0" maxOccurs="unbounded" type="ddlx:checkReference"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="triggers">
    <xs:sequence minOccurs="1" maxOccurs="unbounded">
      <xs:element name="trigger">
        <xs:complexType mixed="true">
          <xs:attribute name="time" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="BEFORE"/>
                <xs:enumeration value="AFTER"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="actions" use="required">
            <xs:simpleType>
              <xs:list>
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="INSERT"/>
                    <xs:enumeration value="UPDATE"/>
                    <xs:enumeration value="DELETE"/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:list>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="indexes">
    <xs:sequence maxOccurs="unbounded">
      <xs:element name="index">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="ddlx:index">
              <xs:sequence minOccurs="1" maxOccurs="unbounded">
                <xs:element name="column" type="ddlx:named"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
        <xs:unique name="index_column_name_must_be_unique">
          <xs:selector xpath="ddlx:column"/>
          <xs:field xpath="@name"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="checkColumn"/>

  <xs:complexType name="integer" abstract="true">
    <xs:complexContent>
      <xs:extension base="ddlx:column">
        <xs:attribute name="generateOnInsert">
          <xs:simpleType>
            <xs:restriction base="xs:NCName">
              <xs:enumeration value="AUTO_INCREMENT"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Start: TINYINT -->

  <xs:attributeGroup name="tinyint">
    <xs:attribute name="precision">
      <xs:simpleType>
        <xs:restriction base="ddlx:precision">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="3"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="min" type="dt:tinyint"/>
    <xs:attribute name="max" type="dt:tinyint"/>
    <xs:attribute name="default" type="dt:tinyint"/>
  </xs:attributeGroup>

  <xs:complexType name="tinyintCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:tinyintCheck"/>
          <xs:element name="or" type="ddlx:tinyintCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:tinyint" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="tinyintAbstract" abstract="true">
    <xs:complexContent>
      <xs:extension base="ddlx:integer">
        <xs:sequence minOccurs="0">
          <xs:element name="check" type="ddlx:tinyintCheck"/>
        </xs:sequence>
        <xs:attributeGroup ref="ddlx:tinyint"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- End: TINYINT -->
  <!-- Start: SMALLINT -->

  <xs:attributeGroup name="smallint">
    <xs:attribute name="precision">
      <xs:simpleType>
        <xs:restriction base="ddlx:precision">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="5"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="min" type="dt:smallint"/>
    <xs:attribute name="max" type="dt:smallint"/>
    <xs:attribute name="default" type="dt:smallint"/>
  </xs:attributeGroup>

  <xs:complexType name="smallintCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:smallintCheck"/>
          <xs:element name="or" type="ddlx:smallintCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:smallint" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="smallintAbstract" abstract="true">
    <xs:complexContent>
      <xs:extension base="ddlx:integer">
        <xs:sequence minOccurs="0">
          <xs:element name="check" type="ddlx:smallintCheck"/>
        </xs:sequence>
        <xs:attributeGroup ref="ddlx:smallint"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- End: SMALLINT -->
  <!-- Start: INT -->

  <xs:attributeGroup name="int">
    <xs:attribute name="precision">
      <xs:simpleType>
        <xs:restriction base="ddlx:precision">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="10"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="min" type="dt:int"/>
    <xs:attribute name="max" type="dt:int"/>
    <xs:attribute name="default" type="dt:int"/>
  </xs:attributeGroup>

  <xs:complexType name="intCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:intCheck"/>
          <xs:element name="or" type="ddlx:intCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:int" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="intAbstract" abstract="true">
    <xs:complexContent>
      <xs:extension base="ddlx:integer">
        <xs:sequence minOccurs="0">
          <xs:element name="check" type="ddlx:intCheck"/>
        </xs:sequence>
        <xs:attributeGroup ref="ddlx:int"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- End: INT -->
  <!-- Start: BIGINT -->

  <xs:attributeGroup name="bigint">
    <xs:attribute name="precision">
      <xs:simpleType>
        <xs:restriction base="ddlx:precision">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="19"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="min" type="dt:bigint"/>
    <xs:attribute name="max" type="dt:bigint"/>
    <xs:attribute name="default" type="dt:bigint"/>
  </xs:attributeGroup>

  <xs:complexType name="bigintCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:bigintCheck"/>
          <xs:element name="or" type="ddlx:bigintCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:bigint" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="bigintAbstract" abstract="true">
    <xs:complexContent>
      <xs:extension base="ddlx:integer">
        <xs:sequence minOccurs="0">
          <xs:element name="check" type="ddlx:bigintCheck"/>
        </xs:sequence>
        <xs:attributeGroup ref="ddlx:bigint"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- End: BIGINT -->
  <!-- Start: FLOAT -->

  <xs:attributeGroup name="float">
    <xs:attribute name="min" type="dt:float"/>
    <xs:attribute name="max" type="dt:float"/>
    <xs:attribute name="default" type="dt:float"/>
  </xs:attributeGroup>

  <xs:complexType name="floatCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:floatCheck"/>
          <xs:element name="or" type="ddlx:floatCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:float" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="float">
    <xs:sequence>
      <xs:element name="check" type="ddlx:floatCheck"/>
    </xs:sequence>
  </xs:group>

  <!-- End: FLOAT -->
  <!-- Start: DOUBLE -->

  <xs:attributeGroup name="double">
    <xs:attribute name="min" type="dt:double"/>
    <xs:attribute name="max" type="dt:double"/>
    <xs:attribute name="default" type="dt:double"/>
  </xs:attributeGroup>

  <xs:complexType name="doubleCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:doubleCheck"/>
          <xs:element name="or" type="ddlx:doubleCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:double" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="double">
    <xs:sequence>
      <xs:element name="check" type="ddlx:doubleCheck"/>
    </xs:sequence>
  </xs:group>

  <!-- End: DOUBLE -->
  <!-- Start: DECIMAL -->

  <xs:attributeGroup name="decimal">
    <xs:attribute name="precision">
      <xs:annotation>
        <xs:documentation>
          The number of digits in the unscaled value. Note: "precision" must begreater than or equal to "scale".
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="147455"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="scale">
      <xs:annotation>
        <xs:documentation>
          The number of digits to the right of the decimal point.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:int">
          <xs:minInclusive value="0"/>
          <xs:maxInclusive value="16383"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="min" type="dt:decimal"/>
    <xs:attribute name="max" type="dt:decimal"/>
    <xs:attribute name="default" type="dt:decimal"/>
  </xs:attributeGroup>

  <xs:complexType name="decimalCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:decimalCheck"/>
          <xs:element name="or" type="ddlx:decimalCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:rangeOperator" use="required"/>
        <xs:attribute name="value" type="dt:decimal" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="decimal">
    <xs:sequence>
      <xs:element name="check" type="ddlx:decimalCheck"/>
    </xs:sequence>
  </xs:group>

  <!-- End: DECIMAL -->
  <!-- Start: BINARY -->

  <xs:attributeGroup name="binary">
    <xs:attribute name="varying" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Default: false
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="length">
      <xs:simpleType>
        <xs:restriction base="xs:unsignedInt">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="2000000000"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="default" type="dt:binary"/>
  </xs:attributeGroup>

  <!-- End: BINARY -->
  <!-- Start: BLOB -->

  <xs:attributeGroup name="blob">
    <xs:attribute name="length">
      <xs:simpleType>
        <xs:restriction base="xs:unsignedInt">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="4294967295"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>

  <!-- End: BLOB -->
  <!-- Start: CHAR -->

  <xs:attributeGroup name="char">
    <xs:attribute name="varying" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Default: false
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="length">
      <xs:simpleType>
        <xs:restriction base="xs:unsignedInt">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="4294967295"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="default" type="dt:char"/>
  </xs:attributeGroup>

  <xs:complexType name="charCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:charCheck"/>
          <xs:element name="or" type="ddlx:charCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:equalityOperator" use="required"/>
        <xs:attribute name="value" type="dt:char" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="char">
    <xs:sequence>
      <xs:element name="check" type="ddlx:charCheck"/>
    </xs:sequence>
  </xs:group>

  <!-- End: CHAR -->
  <!-- Start CLOB -->

  <xs:attributeGroup name="clob">
    <xs:attribute name="length">
      <xs:simpleType>
        <xs:restriction base="xs:unsignedInt">
          <xs:minInclusive value="1"/>
          <xs:maxInclusive value="4294967295"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:complexType name="clobCheck">
    <xs:complexContent>
      <xs:extension base="ddlx:checkColumn">
        <xs:choice minOccurs="0">
          <xs:element name="and" type="ddlx:clobCheck"/>
          <xs:element name="or" type="ddlx:clobCheck"/>
        </xs:choice>
        <xs:attribute name="operator" type="ddlx:equalityOperator" use="required"/>
        <xs:attribute name="value" type="dt:clob" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="clob">
    <xs:sequence>
      <xs:element name="check" type="ddlx:clobCheck"/>
    </xs:sequence>
  </xs:group>

  <!-- End: CLOB -->
  <!-- Start: ENUM -->

  <xs:attributeGroup name="enum">
    <xs:attribute name="values">
      <xs:simpleType>
        <!-- Is there a way to ensure no duplicates occur? -->
        <xs:restriction base="xs:string">
          <xs:pattern value="(\S+(\\ )? )*\S+"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="default" type="dt:enum"/>
  </xs:attributeGroup>

  <!-- End: ENUM -->
  <!-- Start: DATE -->

  <xs:attributeGroup name="date">
    <xs:attribute name="default" type="dt:date"/>
  </xs:attributeGroup>

  <!-- End: DATE -->
  <!-- Start: TMIME -->

  <xs:attributeGroup name="time">
    <xs:attribute name="precision">
      <xs:simpleType>
        <xs:restriction base="xs:byte">
          <xs:minInclusive value="0"/>
          <xs:maxInclusive value="9"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="default" type="dt:time"/>
  </xs:attributeGroup>

  <!-- End: TIME -->
  <!-- Start: DATETIME -->

  <xs:attributeGroup name="datetime">
    <xs:attribute name="precision">
      <xs:simpleType>
        <xs:restriction base="xs:byte">
          <xs:minInclusive value="0"/>
          <xs:maxInclusive value="9"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="default" type="dt:datetime"/>
  </xs:attributeGroup>

  <!-- End: DATETIME -->
  <!-- Start: BOOLEAN -->

  <xs:attributeGroup name="boolean">
    <xs:attribute name="default" type="dt:boolean"/>
  </xs:attributeGroup>

  <!-- End: BOOLEAN -->

  <xs:complexType name="column" abstract="true">
    <xs:complexContent>
      <xs:extension base="ddlx:named">
        <xs:sequence minOccurs="0">
          <xs:element name="foreignKey" minOccurs="0" type="ddlx:foreignKeyUnary">
            <xs:annotation>
              <xs:documentation>
                There is a great potential to be able to have schema validation on the content entered into this
                element. However, the XPath implementation supported by the XMLSchema standard does not allow for the
                necessary complex XPath queries. Therefore, this element is completely unchecked by schema validation
                for the validity of its content.
              </xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="index" minOccurs="0" type="ddlx:index"/>
        </xs:sequence>
        <xs:attribute name="template" type="ddlx:name"/>
        <xs:attribute name="null" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>
              Default: true
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="table">
    <xs:complexContent>
      <xs:extension base="ddlx:named">
        <xs:sequence>
          <xs:element name="column" type="ddlx:column" minOccurs="0" maxOccurs="unbounded">
            <xs:unique name="cannot_specify_precision_on_template_reference">
              <xs:selector xpath="."/>
              <xs:field xpath="@template|@precision"/>
            </xs:unique>
            <xs:unique name="cannot_specify_scale_on_template_reference">
              <xs:selector xpath="."/>
              <xs:field xpath="@template|@scale"/>
            </xs:unique>
            <xs:unique name="cannot_specify_length_on_template_reference">
              <xs:selector xpath="."/>
              <xs:field xpath="@template|@length"/>
            </xs:unique>
            <xs:unique name="cannot_specify_varying_on_template_reference">
              <xs:selector xpath="."/>
              <xs:field xpath="@template|@varying"/>
            </xs:unique>
            <xs:unique name="cannot_specify_values_on_template_reference">
              <xs:selector xpath="."/>
              <xs:field xpath="@template|@values"/>
            </xs:unique>
            <xs:unique name="cannot_specify_both_value_and_null_on_check_column">
              <xs:selector xpath=".//ddlx:check|.//and|.//or"/>
              <xs:field xpath="@value|@null"/>
            </xs:unique>
            <xs:unique name="cannot_specify_both_value_and_reference_on_check_column">
              <xs:selector xpath=".//ddlx:check|.//ddlx:and|.//ddlx:or"/>
              <xs:field xpath="@value|@reference"/>
            </xs:unique>
            <xs:unique name="cannot_specify_both_reference_and_null_on_check_column">
              <xs:selector xpath=".//ddlx:check|.//ddlx:and|.//ddlx:or"/>
              <xs:field xpath="@reference|@null"/>
            </xs:unique>
            <xs:key name="must_specify_either_value_or_reference_or_null_on_check_column">
              <xs:selector xpath=".//ddlx:check|.//ddlx:and|.//ddlx:or"/>
              <xs:field xpath="@value|@reference|@null"/>
            </xs:key>
          </xs:element>
          <xs:element name="constraints" type="ddlx:constraints" minOccurs="0">
            <xs:unique name="cannot_specify_both_value_and_null_on_check_constraint">
              <xs:selector xpath=".//ddlx:check|.//and|.//or"/>
              <xs:field xpath="@value|@null"/>
            </xs:unique>
            <xs:unique name="cannot_specify_both_value_and_reference_on_check_constraint">
              <xs:selector xpath=".//ddlx:check|.//ddlx:and|.//ddlx:or"/>
              <xs:field xpath="@value|@reference"/>
            </xs:unique>
            <xs:unique name="cannot_specify_both_reference_and_null_on_check_constraint">
              <xs:selector xpath=".//ddlx:check|.//ddlx:and|.//ddlx:or"/>
              <xs:field xpath="@reference|@null"/>
            </xs:unique>
            <xs:key name="must_specify_either_value_or_reference_or_null_on_check_constraint">
              <xs:selector xpath=".//ddlx:check|.//ddlx:and|.//ddlx:or"/>
              <xs:field xpath="@value|@reference|@null"/>
            </xs:key>
          </xs:element>
          <xs:element name="triggers" type="ddlx:triggers" minOccurs="0"/>
          <xs:element name="indexes" type="ddlx:indexes" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="abstract" type="xs:boolean" default="false"/>
        <xs:attribute name="extends" type="ddlx:name"/>
        <xs:attribute name="skip" type="xs:boolean" default="false"/>
        <xs:assert test="every $col in ddlx:indexes/ddlx:index/ddlx:column/@name satisfies exists(ddlx:column[@name=$col])">
          <xs:annotation>
            <xs:documentation>
              Index column must reference declared column.
            </xs:documentation>
          </xs:annotation>
        </xs:assert>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

</xs:schema>