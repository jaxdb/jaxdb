<!--
  Copyright (c) 2016 JAX-DB

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  You should have received a copy of The MIT License (MIT) along with this
  program. If not, see <http://opensource.org/licenses/MIT/>.
-->
<xs:schema
  vc:minVersion="1.1"
  elementFormDefault="qualified"
  attributeFormDefault="qualified"
  targetNamespace="http://www.jaxdb.org/jsql-0.6.xsd"
  xmlns:ddlx="http://www.jaxdb.org/ddlx-0.6.xsd"
  xmlns:sqlx="http://www.jaxdb.org/sqlx-0.6.xsd"
  xmlns:jsql="http://www.jaxdb.org/jsql-0.6.xsd"
  xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning"
  xmlns:xs="http://www.w3.org/2001/XMLSchema">

  <xs:import namespace="http://www.jaxdb.org/ddlx-0.6.xsd" schemaLocation="jsql-ddlx-0.6.xsd"/>
  <xs:import namespace="http://www.jaxdb.org/sqlx-0.6.xsd" schemaLocation="http://www.jaxdb.org/sqlx-0.6.xsd"/>

  <xs:attribute name="cache" type="xs:boolean"/>

  <xs:complexType name="tinyint" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:tinyintAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="smallint" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:smallintAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="int" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:intAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="bigint" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:bigintAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="float" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:floatAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="double" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:doubleAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="decimal" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:decimalAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="binary" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:binaryAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="blob" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:blobAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="char" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:charAbstract"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="clob" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:clobAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="enum" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:enumAbstract"/>      
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="date" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:dateAbstract"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="time" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:timeAbstract"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="datetime" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:datetimeAbstract"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="boolean" abstract="true">
    <xs:complexContent>
      <xs:extension base="sqlx:booleanAbstract"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="table">
    <xs:complexContent>
      <xs:extension base="ddlx:table"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="keyForUpdate">
    <xs:complexType>
      <xs:sequence minOccurs="1" maxOccurs="unbounded">
        <xs:element name="column">
          <xs:complexType>
            <xs:complexContent>
              <xs:extension base="ddlx:named">
                <xs:assert test="not('[kfu0] column must belong to existing table, and must be NOT NULL') or (
                  (some $name in @name satisfies (../../ddlx:column[@name=$name] and (some $column in ../../ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies root()/ddlx:table[@name=$extends]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies root()/ddlx:table[@name=$extends2]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends2]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false)))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies root()/ddlx:table[@name=$extends3]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends3]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false))))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies root()/ddlx:table[@name=$extends4]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends4]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false)))))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies root()/ddlx:table[@name=$extends5]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends5]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false))))))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies (some $extends6 in root()/ddlx:table[@name=$extends5]/@extends satisfies root()/ddlx:table[@name=$extends6]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends6]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false)))))))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies (some $extends6 in root()/ddlx:table[@name=$extends5]/@extends satisfies (some $extends7 in root()/ddlx:table[@name=$extends6]/@extends satisfies root()/ddlx:table[@name=$extends7]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends7]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false))))))))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies (some $extends6 in root()/ddlx:table[@name=$extends5]/@extends satisfies (some $extends7 in root()/ddlx:table[@name=$extends6]/@extends satisfies (some $extends8 in root()/ddlx:table[@name=$extends7]/@extends satisfies root()/ddlx:table[@name=$extends8]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends8]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false)))))))))))) or
                  (some $name in @name satisfies (some $extends in ../../@extends satisfies (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies (some $extends6 in root()/ddlx:table[@name=$extends5]/@extends satisfies (some $extends7 in root()/ddlx:table[@name=$extends6]/@extends satisfies (some $extends8 in root()/ddlx:table[@name=$extends7]/@extends satisfies (some $extends9 in root()/ddlx:table[@name=$extends8]/@extends satisfies root()/ddlx:table[@name=$extends9]/ddlx:column[@name=$name] and (some $column in root()/ddlx:table[@name=$extends9]/ddlx:column[@name=$name] satisfies ($column/@null=boolean(false) or root()/ddlx:template[@name=$column/@template]/@null=boolean(false)))))))))))))
                )"/>
                <xs:assert test="not('[kfu1] keyForUpdate is specified in parent table') or
                  not(../../@extends) or (some $extends in ../../@extends satisfies not(root()/ddlx:table[@name=$extends]/*[local-name() = 'keyForUpdate']) and (
                    not(root()/ddlx:table[@name=$extends]/@extends) or (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies not(root()/ddlx:table[@name=$extends2]/*[local-name() = 'keyForUpdate']) and (
                      not(root()/ddlx:table[@name=$extends2]/@extends) or (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies not(root()/ddlx:table[@name=$extends3]/*[local-name() = 'keyForUpdate']) and (
                        not(root()/ddlx:table[@name=$extends3]/@extends) or (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies not(root()/ddlx:table[@name=$extends4]/*[local-name() = 'keyForUpdate']) and (
                          not(root()/ddlx:table[@name=$extends4]/@extends) or (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies not(root()/ddlx:table[@name=$extends5]/*[local-name() = 'keyForUpdate']) and (
                            not(root()/ddlx:table[@name=$extends5]/@extends) or (some $extends6 in root()/ddlx:table[@name=$extends5]/@extends satisfies not(root()/ddlx:table[@name=$extends6]/*[local-name() = 'keyForUpdate']) and (
                              not(root()/ddlx:table[@name=$extends6]/@extends) or (some $extends7 in root()/ddlx:table[@name=$extends6]/@extends satisfies not(root()/ddlx:table[@name=$extends7]/*[local-name() = 'keyForUpdate']) and (
                                not(root()/ddlx:table[@name=$extends7]/@extends) or (some $extends8 in root()/ddlx:table[@name=$extends7]/@extends satisfies not(root()/ddlx:table[@name=$extends8]/*[local-name() = 'keyForUpdate']) and (
                                  not(root()/ddlx:table[@name=$extends8]/@extends) or (some $extends9 in root()/ddlx:table[@name=$extends8]/@extends satisfies not(root()/ddlx:table[@name=$extends9]/*[local-name() = 'keyForUpdate']))
                                ))
                              ))
                            ))
                          ))
                        ))
                      ))
                    ))
                  ))"/>
                <xs:assert test="not('[kfu2] Column name exists in primaryKey') or (some $name in @name satisfies
                  not(../../ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                    not(../../@extends) or (some $extends in ../../@extends satisfies not(root()/ddlx:table[@name=$extends]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                      not(root()/ddlx:table[@name=$extends]/@extends) or (some $extends2 in root()/ddlx:table[@name=$extends]/@extends satisfies not(root()/ddlx:table[@name=$extends2]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                        not(root()/ddlx:table[@name=$extends2]/@extends) or (some $extends3 in root()/ddlx:table[@name=$extends2]/@extends satisfies not(root()/ddlx:table[@name=$extends3]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                          not(root()/ddlx:table[@name=$extends3]/@extends) or (some $extends4 in root()/ddlx:table[@name=$extends3]/@extends satisfies not(root()/ddlx:table[@name=$extends4]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                            not(root()/ddlx:table[@name=$extends4]/@extends) or (some $extends5 in root()/ddlx:table[@name=$extends4]/@extends satisfies not(root()/ddlx:table[@name=$extends5]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                              not(root()/ddlx:table[@name=$extends5]/@extends) or (some $extends6 in root()/ddlx:table[@name=$extends5]/@extends satisfies not(root()/ddlx:table[@name=$extends6]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                                not(root()/ddlx:table[@name=$extends6]/@extends) or (some $extends7 in root()/ddlx:table[@name=$extends6]/@extends satisfies not(root()/ddlx:table[@name=$extends7]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                                  not(root()/ddlx:table[@name=$extends7]/@extends) or (some $extends8 in root()/ddlx:table[@name=$extends7]/@extends satisfies not(root()/ddlx:table[@name=$extends8]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]) and (
                                    not(root()/ddlx:table[@name=$extends8]/@extends) or (some $extends9 in root()/ddlx:table[@name=$extends8]/@extends satisfies not(root()/ddlx:table[@name=$extends9]/ddlx:constraints/ddlx:primaryKey/ddlx:column[@name=$name]))
                                  ))
                                ))
                              ))
                            ))
                          ))
                        ))
                      ))
                    ))
                  ))"/>
              </xs:extension>
            </xs:complexContent>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="row" abstract="true"/>
  <xs:complexType name="insert"/>
  <xs:complexType name="database"/>

</xs:schema>